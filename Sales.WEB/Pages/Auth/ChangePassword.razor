@page "/changePassword"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@attribute [Authorize]

@if (loading)
{
    <div class="spinner" />
}
<div class="row">
    <div class="col-6">
        <EditForm Model="changePasswordDTO" OnValidSubmit="ChangePasswordAsync">
            <DataAnnotationsValidator />
            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-key" /> Cambiar Contraseña
                        <a class="btn btn-sm btn-success float-end" href="/editUser"><i class="oi oi-arrow-thick-left" /> Regresar</a>
                        <button class="btn btn-sm btn-primary float-end mx-2" type="submit"><i class="oi oi-check" /> Guardar Cambios</button>
                    </span>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label>Contraseña actual:</label>
                        <div>
                            <InputText type="password" class="form-control" @bind-Value="@changePasswordDTO.CurrentPassword" />
                            <ValidationMessage For="@(() => changePasswordDTO.CurrentPassword)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Nueva contraseña:</label>
                        <div>
                            <InputText type="password" class="form-control" @bind-Value="@changePasswordDTO.NewPassword" />
                            <ValidationMessage For="@(() => changePasswordDTO.CurrentPassword)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Confirmación de nueva contraseña:</label>
                        <div>
                            <InputText type="password" class="form-control" @bind-Value="@changePasswordDTO.Confirm" />
                            <ValidationMessage For="@(() => changePasswordDTO.Confirm)" />
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private ChangePasswordDTO changePasswordDTO = new();
    private bool loading;

    private async Task ChangePasswordAsync()
    {
        loading = true;
        var responseHttp = await repository.Post("/api/accounts/changePassword", changePasswordDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            loading = false;
            return;
        }

        loading = false;
        navigationManager.NavigateTo("/editUser");
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.TopEnd,
                ShowConfirmButton = true,
                Timer = 5000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Contraseña cambiada con éxito.");
    }
}
