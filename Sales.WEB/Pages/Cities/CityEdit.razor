@page "/cities/edit/{CityId:int}"
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Editar Ciudad</h3>

@if (city is null)
{
    <p>Cargando...</p>
}
else
{
    <CityForm @ref="cityForm" City="city" OnValidSubmit="EditAsync" ReturnAction="Return" />
}

@code {
    private City? city;
    private CityForm? cityForm;

    [Parameter]
    public int CityId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<City>($"/api/cities/{CityId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/countries");
                return;
            }

            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        city = responseHttp.Response;
    }

    private async Task EditAsync()
    {
        var responseHttp = await repository.Put("/api/cities", city);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        Return();
    }

    private void Return()
    {
        cityForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/states/details/{city!.StateId}");
    }
}
